# Generated by Django 5.1.6 on 2025-03-11 02:40

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BumpTest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('T1', models.DateTimeField(blank=True, null=True)),
                ('T2', models.DateTimeField(blank=True, null=True)),
                ('T3', models.DateTimeField(blank=True, null=True)),
                ('T4', models.DateTimeField(blank=True, null=True)),
                ('TCV', models.DateTimeField(blank=True, help_text='CV Changed', null=True)),
                ('T1_note', models.CharField(blank=True, max_length=255, null=True)),
                ('T2_note', models.CharField(blank=True, max_length=255, null=True)),
                ('T3_note', models.CharField(blank=True, max_length=255, null=True)),
                ('T4_note', models.CharField(blank=True, max_length=255, null=True)),
                ('p', models.FloatField(blank=True, null=True)),
                ('i', models.FloatField(blank=True, null=True)),
                ('d', models.FloatField(blank=True, null=True)),
                ('delta_pv', models.FloatField(blank=True, help_text='Change in Process Variable (ΔPV)', null=True)),
                ('delta_cv', models.FloatField(blank=True, help_text='Change in Process Variable (ΔPV)', null=True)),
                ('kc', models.FloatField(blank=True, null=True)),
                ('Td', models.FloatField(blank=True, help_text='Deadtime in seconds', null=True)),
                ('tau', models.FloatField(blank=True, help_text='Time Constant in seconds', null=True)),
                ('p_cohen', models.FloatField(blank=True, null=True)),
                ('i_cohen', models.FloatField(blank=True, null=True)),
                ('d_cohen', models.FloatField(blank=True, null=True)),
                ('kc_cohen', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PIDCalculation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proportional_gain', models.FloatField()),
                ('integral_time', models.FloatField()),
                ('derivative_time', models.FloatField()),
                ('acceptable_filter_time', models.FloatField(default=0.5)),
                ('lambda_value', models.FloatField(default=10.0)),
                ('min_lambda', models.FloatField(default=1.0)),
                ('max_lambda', models.FloatField(default=100.0)),
                ('tuning_method', models.CharField(choices=[('lambda', 'Lambda'), ('cohen_coon', 'Cohen-Coon')], default='lambda', max_length=50)),
                ('bump_tests', models.ManyToManyField(blank=True, to='tuner.bumptest')),
            ],
        ),
        migrations.CreateModel(
            name='PIDLoop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('pid_type', models.CharField(choices=[('1st Order', '1st Order'), ('Integrating', 'Integrating'), ('Integrating with Lag', 'Integrating with Lag')], default='1st Order', max_length=50)),
                ('pv_max', models.FloatField(default=100.0)),
                ('pv_min', models.FloatField(default=0.0)),
                ('out_max', models.FloatField(default=100.0)),
                ('out_min', models.FloatField(default=0.0)),
                ('proportional_gain', models.FloatField(blank=True, null=True)),
                ('integral_time', models.FloatField(blank=True, null=True)),
                ('derivative_time', models.FloatField(blank=True, null=True)),
                ('selected_pid_calculation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='official_pid_loop', to='tuner.pidcalculation')),
            ],
        ),
        migrations.AddField(
            model_name='pidcalculation',
            name='pid_loop',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pid_calculations', to='tuner.pidloop'),
        ),
        migrations.CreateModel(
            name='LambdaVariable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lambda_value', models.FloatField()),
                ('min_lambda', models.FloatField()),
                ('max_lambda', models.FloatField()),
                ('pid_loop', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lambda_variable', to='tuner.pidloop')),
            ],
        ),
        migrations.CreateModel(
            name='TrendChart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploaded_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('csv_file', models.FileField(blank=True, null=True, upload_to='trend_charts/')),
                ('description', models.TextField(blank=True, null=True)),
                ('pid_loop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tuner.pidloop')),
            ],
        ),
        migrations.AddField(
            model_name='bumptest',
            name='trend_chart',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tuner.trendchart'),
        ),
    ]
